@inproceedings{10.1145/3411174.3411193,
author = {Wongtanuwat, Wat and Senivongse, Twittie},
title = {Detection of Violation of MVVM Design Pattern in Objective-C Programs},
year = {2020},
isbn = {9781450387668},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3411174.3411193},
doi = {10.1145/3411174.3411193},
abstract = {In object-oriented software development, several design patterns are used to design software to solve different problems. The Model-View-ViewModel or MVVM pattern is a design pattern that can be used to design structure of software which comprises three components. The Model component holds application data. The View component displays visual elements and controls on the screen. The ViewModel component is the intermediary between the Model and View and transforms model information for display on a view. The advantages of this pattern are that there is a clear separation between domain logic in the Model and the display on the View, and tests and maintenance of different components are facilitated. However, there are several developers in a software development team, and not all developers use the MVVM pattern. This makes the code not compliant with the pattern and affects code maintenance. To help developers to revise the code to comply with the MVVM pattern, this paper has studied the MVVM design pattern, summarized principles of the pattern, and proposed the criteria to detect pattern violation in Objective-C code. An automated tool has been developed to detect MVVM violation and report violation locations in the code so that developers can revise the code to follow the pattern. An experiment shows that the tool performs satisfactorily in pattern violation detection, compared with manual detection, with the precision of 0.81, recall of 0.77, and F1 of 0.79.},
booktitle = {Proceedings of the 8th International Conference on Computer and Communications Management},
pages = {54–58},
numpages = {5},
keywords = {objective-C, maintainability, design pattern, MVVM},
location = {Singapore, Singapore},
series = {ICCCM '20}
}

@inproceedings{10.1145/3550356.3558513,
author = {Fuksa, Mario},
title = {ViMoTest: a low code approach to specify ViewModel-based tests with a projectional DSL using JetBrains MPS},
year = {2022},
isbn = {9781450394673},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3550356.3558513},
doi = {10.1145/3550356.3558513},
abstract = {Automated testing for software is a fundamental part of achieving high-quality software systems. In particular, the user interface (UI) is one suitable abstraction layer for automated tests. However, software test developers usually spend considerable effort writing automated UI tests in a maintainable way. Therefore, this work proposes a concept to design a low code approach using the ViewModel architectural pattern as an abstraction layer to develop automated UI tests. We use the Design Science Research method to design a projectional DSL as an artifact to refine our approach. As planned results, we aim to (1) develop a projectional DSL to specify ViewModel-based tests, (2) apply this novel approach in an industrial and an open-source project, and (3) perform empirical studies to get feedback for improving this approach w.r.t. creation, maintenance, and understandability of test suites. We conclude that a low code approach using a projectional DSL to specify automated tests based on ViewModels could have several benefits compared to similar approaches.},
booktitle = {Proceedings of the 25th International Conference on Model Driven Engineering Languages and Systems: Companion Proceedings},
pages = {189–194},
numpages = {6},
keywords = {software testing, ViewModel, MDSD, JetBrains MPS, BDD},
location = {Montreal, Quebec, Canada},
series = {MODELS '22}
}

