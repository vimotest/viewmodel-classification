@inproceedings{10.1145/3411174.3411193,
author = {Wongtanuwat, Wat and Senivongse, Twittie},
title = {Detection of Violation of MVVM Design Pattern in Objective-C Programs},
year = {2020},
isbn = {9781450387668},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3411174.3411193},
doi = {10.1145/3411174.3411193},
abstract = {In object-oriented software development, several design patterns are used to design software to solve different problems. The Model-View-ViewModel or MVVM pattern is a design pattern that can be used to design structure of software which comprises three components. The Model component holds application data. The View component displays visual elements and controls on the screen. The ViewModel component is the intermediary between the Model and View and transforms model information for display on a view. The advantages of this pattern are that there is a clear separation between domain logic in the Model and the display on the View, and tests and maintenance of different components are facilitated. However, there are several developers in a software development team, and not all developers use the MVVM pattern. This makes the code not compliant with the pattern and affects code maintenance. To help developers to revise the code to comply with the MVVM pattern, this paper has studied the MVVM design pattern, summarized principles of the pattern, and proposed the criteria to detect pattern violation in Objective-C code. An automated tool has been developed to detect MVVM violation and report violation locations in the code so that developers can revise the code to follow the pattern. An experiment shows that the tool performs satisfactorily in pattern violation detection, compared with manual detection, with the precision of 0.81, recall of 0.77, and F1 of 0.79.},
booktitle = {Proceedings of the 8th International Conference on Computer and Communications Management},
pages = {54–58},
numpages = {5},
keywords = {objective-C, maintainability, design pattern, MVVM},
location = {Singapore, Singapore},
series = {ICCCM '20}
}

@inproceedings{10.1145/3626641.3626948,
author = {Paramadani, Rizky Bagus and Akbar, Muhammad Aminul and Pinandito, Aryo},
title = {User Interface Rendering Time in Android Applications: Revealing the Effects of Design Patterns},
year = {2023},
isbn = {9798400708503},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3626641.3626948},
doi = {10.1145/3626641.3626948},
abstract = {The Google Play platform boasts a total of 2,597,819 applications. A pivotal gauge of an application’s success rests on its practical utility in daily life, coupled with its demonstrated strong performance metrics. There are several performance metrics to evaluate the performance of an application, such as RAM usage, CPU utilization, and their impact on battery life. Additionally, it is crucial to consider the User Interface (UI) factor, which serves as the primary connection between users and applications. Beyond its role as a bridge between users and applications, the UI can also significantly affect the performance of an application, as rendering a UI often takes a considerable amount of time. Various approaches can be employed to enhance the rendering time of a UI, one of which involves the use of design patterns like Model-View-Controller (MVC) and Model-View-ViewModel (MVVM), which effectively separate the business logic from the UI layer. This research study compares the performance of these two design patterns in the context of UI rendering time. The findings of this study confirm that MVVM outperforms MVC significantly in rendering UI components more rapidly. This superiority is attributed to MVVM’s inherent ability to isolate business logic, ultimately reducing rendering delays. Furthermore, MVVM’s prominent data binding feature further strengthens its efficiency in terms of UI rendering time.},
booktitle = {Proceedings of the 8th International Conference on Sustainable Information Engineering and Technology},
pages = {631–636},
numpages = {6},
keywords = {Rendering, MVVM, MVC, Design Pattern, Android},
location = {<conf-loc>, <city>Badung, Bali</city>, <country>Indonesia</country>, </conf-loc>},
series = {SIET '23}
}

@inproceedings{10.1145/3550356.3558513,
author = {Fuksa, Mario},
title = {ViMoTest: a low code approach to specify ViewModel-based tests with a projectional DSL using JetBrains MPS},
year = {2022},
isbn = {9781450394673},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3550356.3558513},
doi = {10.1145/3550356.3558513},
abstract = {Automated testing for software is a fundamental part of achieving high-quality software systems. In particular, the user interface (UI) is one suitable abstraction layer for automated tests. However, software test developers usually spend considerable effort writing automated UI tests in a maintainable way. Therefore, this work proposes a concept to design a low code approach using the ViewModel architectural pattern as an abstraction layer to develop automated UI tests. We use the Design Science Research method to design a projectional DSL as an artifact to refine our approach. As planned results, we aim to (1) develop a projectional DSL to specify ViewModel-based tests, (2) apply this novel approach in an industrial and an open-source project, and (3) perform empirical studies to get feedback for improving this approach w.r.t. creation, maintenance, and understandability of test suites. We conclude that a low code approach using a projectional DSL to specify automated tests based on ViewModels could have several benefits compared to similar approaches.},
booktitle = {Proceedings of the 25th International Conference on Model Driven Engineering Languages and Systems: Companion Proceedings},
pages = {189–194},
numpages = {6},
keywords = {software testing, ViewModel, MDSD, JetBrains MPS, BDD},
location = {Montreal, Quebec, Canada},
series = {MODELS '22}
}

@inproceedings{10.1145/3412841.3442018,
author = {Chekhaba, Chaima and Rebatchi, Hocine and ElBoussaidi, Ghizlane and Moha, Naouel and Kpodjedo, S\`{e}gla},
title = {Coach: classification-based architectural patterns detection in Android apps},
year = {2021},
isbn = {9781450381048},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3412841.3442018},
doi = {10.1145/3412841.3442018},
abstract = {Mobile applications (apps) have become a key feature of modern life, and as such, are expected to be high-quality software products. App developers thus have to consider and apply best practices and design recommendations such as architectural patterns. One of these patterns is the popular MVC (Model View Controller) and its variants: MVP (Model View Presenter) and MVVM (Model View ViewModel). However, there is no common or established strategy that developers can follow when implementing these patterns in their apps. In this context, analyzing existing mobile apps and identifying their implementations of the MVC pattern variants becomes important to understand the current practices in mobile apps. In this paper, we present a classification-based approach to identify MVC-based patterns in Android apps. We provide a dataset of 69 Android apps manually annotated with the applied MVC-based pattern. We validate our approach on 265 open-source Android apps and show that it outperforms the only existing pattern detection tool for all the MVC-based variants.},
booktitle = {Proceedings of the 36th Annual ACM Symposium on Applied Computing},
pages = {1429–1438},
numpages = {10},
keywords = {classification, MVVM, MVP, MVC, Android development},
location = {Virtual Event, Republic of Korea},
series = {SAC '21}
}

@inproceedings{10.1145/3297280.3297447,
author = {Daoudi, Aymen and ElBoussaidi, Ghizlane and Moha, Naouel and Kpodjedo, S\`{e}gla},
title = {An exploratory study of MVC-based architectural patterns in Android apps},
year = {2019},
isbn = {9781450359337},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3297280.3297447},
doi = {10.1145/3297280.3297447},
abstract = {Mobile app development now represents a significant part of the software industry, with Android being the largest ecosystem. Android development comes with its own design practices and templates (layouts, activities, etc.). Developers also use different established architectural patterns for designing interactive software such as MVC, MVP and MVVM. They implement these patterns based on their understanding and experience. Thus, the choice and the implementation of such patterns varies from a developer to another. To the best of our knowledge, there is no work that provides a comprehensive view of the use of these patterns in mobile apps. Moreover, there is no clear understanding of which pattern to use and what is the trend for designing mobile apps using such patterns. In this paper, we propose an automatic approach to identify which MVC-based architectural pattern (MVC, MVP and MVVM) is used predominantly in a given app. For this purpose, we defined each of these patterns through a number of heuristics according to the pattern's potential implementations within the Android framework. We conducted an empirical study on a large set of mobile apps downloaded from the Google Play Store. We found, not surprisingly, a dominance of the popular MVC pattern, a rare use of MVP while MVVM is almost unused and a significant number of apps do not follow any pattern. The empirical study also enabled us to analyse the use of these patterns by domain, size and last-update date of the apps. We observed that MVC has been the most used pattern over the past years and it continues to gain popularity, and that small-size apps are mostly the ones that do not use any pattern.},
booktitle = {Proceedings of the 34th ACM/SIGAPP Symposium on Applied Computing},
pages = {1711–1720},
numpages = {10},
keywords = {software architecture, mobile development, design patterns, architectural patterns, MVVM, MVP, MVC},
location = {Limassol, Cyprus},
series = {SAC '19}
}

@inproceedings{10.1145/2371401.2371413,
author = {Freeman, John and J\"{a}rvi, Jaakko and Foust, Gabriel},
title = {HotDrink: a library for web user interfaces},
year = {2012},
isbn = {9781450311298},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2371401.2371413},
doi = {10.1145/2371401.2371413},
abstract = {HotDrink is a JavaScript library for constructing forms, dialogs, and other common user interfaces for Web applications. With HotDrink, instead of writing event handlers, developers declare a "view-model" in JavaScript and a set of "bindings" between the view-model and the HTML elements comprising the view. These specifications tend to be small, but they are enough for HotDrink to provide a fully operational GUI with multi-way dataflows, enabling/disabling of values, activation/deactivation of commands, and data validation. HotDrink implements these rich behaviors, expected of high-quality user interfaces, as generic reusable algorithms. This paper/tool demonstration introduces developers to the HotDrink library by stepping through the construction of an example web application GUI.The library is a concrete realization of our prior work on the "property models" approach to declarative GUI programming. To encourage adoption among developers, we have packaged the technology following established web programming conventions.},
booktitle = {Proceedings of the 11th International Conference on Generative Programming and Component Engineering},
pages = {80–83},
numpages = {4},
keywords = {web, user interface, declarative programming, MVVM pattern},
location = {Dresden, Germany},
series = {GPCE '12}
}

@inproceedings{10.1145/3511430.3511434,
author = {Singh, Lavneet},
title = {RMVRVM – A Paradigm for Creating Energy Efficient User Applications Connected to Cloud through REST API},
year = {2022},
isbn = {9781450396189},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3511430.3511434},
doi = {10.1145/3511430.3511434},
abstract = {The applications that run on resource-constrained devices, especially for batteries, pose a challenge. The activities such applications do while running on such devices consume energy and drain the device's battery. Many of these applications use REST API to communicate with their backend services running outside of the devices, primarily on the cloud. The paradigms like Model View View-Model (MVVM) used on the application side require data transformations that cause applications to consume more battery. There is a need for an improved approach and a paradigm that can be used to develop green software with reduced battery consumption. This paper proposes a novel Remote-Model View Remote-View-Model (RMVRVM) paradigm. The use of RMVRVM paradigm lowers the battery consumption on devices where the application is running and hence contributes to writing green software. In addition, RMVRVM makes an application more responsive and thus a delight to use. This paradigm has been implemented in industrial case studies, and significant gains in terms of the reduced amount of data transfer, reduced battery consumption, and faster response time were observed. Experiments were also done to further validate the paradigm with encouraging results. The practitioners can apply the RMVRVM to design applications for battery-constrained devices with smaller energy footprints and better response times.},
booktitle = {15th Innovations in Software Engineering Conference},
articleno = {6},
numpages = {11},
keywords = {Sustainable Software Engineering, Non-functional Requirements, Model View View-Model (MVVM), Green Software, Energy Efficient Mobile Applications, Battery Saving},
location = {Gandhinagar, India},
series = {ISEC 2022}
}

