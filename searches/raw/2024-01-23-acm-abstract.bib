@inproceedings{10.1145/3411174.3411193,
author = {Wongtanuwat, Wat and Senivongse, Twittie},
title = {Detection of Violation of MVVM Design Pattern in Objective-C Programs},
year = {2020},
isbn = {9781450387668},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3411174.3411193},
doi = {10.1145/3411174.3411193},
abstract = {In object-oriented software development, several design patterns are used to design software to solve different problems. The Model-View-ViewModel or MVVM pattern is a design pattern that can be used to design structure of software which comprises three components. The Model component holds application data. The View component displays visual elements and controls on the screen. The ViewModel component is the intermediary between the Model and View and transforms model information for display on a view. The advantages of this pattern are that there is a clear separation between domain logic in the Model and the display on the View, and tests and maintenance of different components are facilitated. However, there are several developers in a software development team, and not all developers use the MVVM pattern. This makes the code not compliant with the pattern and affects code maintenance. To help developers to revise the code to comply with the MVVM pattern, this paper has studied the MVVM design pattern, summarized principles of the pattern, and proposed the criteria to detect pattern violation in Objective-C code. An automated tool has been developed to detect MVVM violation and report violation locations in the code so that developers can revise the code to follow the pattern. An experiment shows that the tool performs satisfactorily in pattern violation detection, compared with manual detection, with the precision of 0.81, recall of 0.77, and F1 of 0.79.},
booktitle = {Proceedings of the 8th International Conference on Computer and Communications Management},
pages = {54–58},
numpages = {5},
keywords = {MVVM, design pattern, maintainability, objective-C},
location = {Singapore, Singapore},
series = {ICCCM '20}
}

@inproceedings{10.1145/3626641.3626948,
author = {Paramadani, Rizky Bagus and Akbar, Muhammad Aminul and Pinandito, Aryo},
title = {User Interface Rendering Time in Android Applications: Revealing the Effects of Design Patterns},
year = {2023},
isbn = {9798400708503},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3626641.3626948},
doi = {10.1145/3626641.3626948},
abstract = {The Google Play platform boasts a total of 2,597,819 applications. A pivotal gauge of an application’s success rests on its practical utility in daily life, coupled with its demonstrated strong performance metrics. There are several performance metrics to evaluate the performance of an application, such as RAM usage, CPU utilization, and their impact on battery life. Additionally, it is crucial to consider the User Interface (UI) factor, which serves as the primary connection between users and applications. Beyond its role as a bridge between users and applications, the UI can also significantly affect the performance of an application, as rendering a UI often takes a considerable amount of time. Various approaches can be employed to enhance the rendering time of a UI, one of which involves the use of design patterns like Model-View-Controller (MVC) and Model-View-ViewModel (MVVM), which effectively separate the business logic from the UI layer. This research study compares the performance of these two design patterns in the context of UI rendering time. The findings of this study confirm that MVVM outperforms MVC significantly in rendering UI components more rapidly. This superiority is attributed to MVVM’s inherent ability to isolate business logic, ultimately reducing rendering delays. Furthermore, MVVM’s prominent data binding feature further strengthens its efficiency in terms of UI rendering time.},
booktitle = {Proceedings of the 8th International Conference on Sustainable Information Engineering and Technology},
pages = {631–636},
numpages = {6},
keywords = {Android, Design Pattern, MVC, MVVM, Rendering},
location = {<conf-loc>, <city>Badung, Bali</city>, <country>Indonesia</country>, </conf-loc>},
series = {SIET '23}
}

@inproceedings{10.1145/3412841.3442018,
author = {Chekhaba, Chaima and Rebatchi, Hocine and ElBoussaidi, Ghizlane and Moha, Naouel and Kpodjedo, S\`{e}gla},
title = {Coach: classification-based architectural patterns detection in Android apps},
year = {2021},
isbn = {9781450381048},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3412841.3442018},
doi = {10.1145/3412841.3442018},
abstract = {Mobile applications (apps) have become a key feature of modern life, and as such, are expected to be high-quality software products. App developers thus have to consider and apply best practices and design recommendations such as architectural patterns. One of these patterns is the popular MVC (Model View Controller) and its variants: MVP (Model View Presenter) and MVVM (Model View ViewModel). However, there is no common or established strategy that developers can follow when implementing these patterns in their apps. In this context, analyzing existing mobile apps and identifying their implementations of the MVC pattern variants becomes important to understand the current practices in mobile apps. In this paper, we present a classification-based approach to identify MVC-based patterns in Android apps. We provide a dataset of 69 Android apps manually annotated with the applied MVC-based pattern. We validate our approach on 265 open-source Android apps and show that it outperforms the only existing pattern detection tool for all the MVC-based variants.},
booktitle = {Proceedings of the 36th Annual ACM Symposium on Applied Computing},
pages = {1429–1438},
numpages = {10},
keywords = {Android development, MVC, MVP, MVVM, classification},
location = {Virtual Event, Republic of Korea},
series = {SAC '21}
}

@inproceedings{10.1145/2934466.2946044,
author = {Ne\v{s}i\'{c}, Damir and Nyberg, Mattias},
title = {Multi-view modeling and automated analysis of product line variability in systems engineering},
year = {2016},
isbn = {9781450340502},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2934466.2946044},
doi = {10.1145/2934466.2946044},
abstract = {Product Lines (PL) in the systems engineering (SE) domain are one of the largest and most complex ones. The sheer number of different products that can be derived from PL points out to the scale of the challenge that Product Line Engineering (PLE) faces. Various development artifacts describe PL but due to their diversity, variability modeling across PL is a challenging task. Moreover, this complexity is a major obstacle for achieving traceability across PL which is especially important for product verification. In order to support systems engineering by establishing traceability across PL and aid verification planning we propose Multi-View Variability Model (MVVM). MVVM introduces a set of variability models that represent variability in various development artifacts, e.g. architecture, requirements etc. and corresponding inter-model constraints. We provide a formalization of MVVM and perform a transformation of the MVVM model to a Constraint Satisfiability Problem (CSP) where we formulate queries for the CSP model in order to extract information about variability dependencies among MVVM views. Throughout the paper we use a real system from the automotive domain as the working example in order to illustrate the introduced concepts.},
booktitle = {Proceedings of the 20th International Systems and Software Product Line Conference},
pages = {287–296},
numpages = {10},
keywords = {constraint satisfaction problem, feature diagram, multi-view modeling, product line, variability modeling, verification},
location = {Beijing, China},
series = {SPLC '16}
}

@inproceedings{10.1145/3297280.3297447,
author = {Daoudi, Aymen and ElBoussaidi, Ghizlane and Moha, Naouel and Kpodjedo, S\`{e}gla},
title = {An exploratory study of MVC-based architectural patterns in Android apps},
year = {2019},
isbn = {9781450359337},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3297280.3297447},
doi = {10.1145/3297280.3297447},
abstract = {Mobile app development now represents a significant part of the software industry, with Android being the largest ecosystem. Android development comes with its own design practices and templates (layouts, activities, etc.). Developers also use different established architectural patterns for designing interactive software such as MVC, MVP and MVVM. They implement these patterns based on their understanding and experience. Thus, the choice and the implementation of such patterns varies from a developer to another. To the best of our knowledge, there is no work that provides a comprehensive view of the use of these patterns in mobile apps. Moreover, there is no clear understanding of which pattern to use and what is the trend for designing mobile apps using such patterns. In this paper, we propose an automatic approach to identify which MVC-based architectural pattern (MVC, MVP and MVVM) is used predominantly in a given app. For this purpose, we defined each of these patterns through a number of heuristics according to the pattern's potential implementations within the Android framework. We conducted an empirical study on a large set of mobile apps downloaded from the Google Play Store. We found, not surprisingly, a dominance of the popular MVC pattern, a rare use of MVP while MVVM is almost unused and a significant number of apps do not follow any pattern. The empirical study also enabled us to analyse the use of these patterns by domain, size and last-update date of the apps. We observed that MVC has been the most used pattern over the past years and it continues to gain popularity, and that small-size apps are mostly the ones that do not use any pattern.},
booktitle = {Proceedings of the 34th ACM/SIGAPP Symposium on Applied Computing},
pages = {1711–1720},
numpages = {10},
keywords = {MVC, MVP, MVVM, architectural patterns, design patterns, mobile development, software architecture},
location = {Limassol, Cyprus},
series = {SAC '19}
}

@inproceedings{10.1145/3550356.3558513,
author = {Fuksa, Mario},
title = {ViMoTest: a low code approach to specify ViewModel-based tests with a projectional DSL using JetBrains MPS},
year = {2022},
isbn = {9781450394673},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3550356.3558513},
doi = {10.1145/3550356.3558513},
abstract = {Automated testing for software is a fundamental part of achieving high-quality software systems. In particular, the user interface (UI) is one suitable abstraction layer for automated tests. However, software test developers usually spend considerable effort writing automated UI tests in a maintainable way. Therefore, this work proposes a concept to design a low code approach using the ViewModel architectural pattern as an abstraction layer to develop automated UI tests. We use the Design Science Research method to design a projectional DSL as an artifact to refine our approach. As planned results, we aim to (1) develop a projectional DSL to specify ViewModel-based tests, (2) apply this novel approach in an industrial and an open-source project, and (3) perform empirical studies to get feedback for improving this approach w.r.t. creation, maintenance, and understandability of test suites. We conclude that a low code approach using a projectional DSL to specify automated tests based on ViewModels could have several benefits compared to similar approaches.},
booktitle = {Proceedings of the 25th International Conference on Model Driven Engineering Languages and Systems: Companion Proceedings},
pages = {189–194},
numpages = {6},
keywords = {BDD, JetBrains MPS, MDSD, ViewModel, software testing},
location = {Montreal, Quebec, Canada},
series = {MODELS '22}
}

@inproceedings{10.1145/1900160.1900174,
author = {Mansell, Howard},
title = {Eden: an F#/WPF framework for building GUI tools},
year = {2010},
isbn = {9781450305167},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1900160.1900174},
doi = {10.1145/1900160.1900174},
abstract = {Our group within Credit Suisse is responsible for developing quantitative models used to value financial products within the Securities Division of the bank. One aspect of this role is to deliver tools based on those models to trading and sales staff, which they can use to quickly price proposed transactions and perform other analysis of market conditions. Historically these tools have been delivered as Excel spreadsheets.WPF (Windows Presentation Foundation) is a GUI framework which encourages architectural separation between the layout of the user interface itself (the "View") and the underlying interactions and calculations (the "ViewModel" and "Model"). We have built a framework for developing tools in WPF that makes use of a graph-based calculation engine for implementing ViewModels and Models in F#. The engine is built on F# asynchronous workflows and provides a standard set of features to our tools. In this talk I'll discuss the implementation of this calculation engine, including various steps in its evolution that led up to our use of asynchronous workflows. I'll also talk about how well F# and asynchronous workflows have worked for us, and briefly discuss some of the challenges of integrating F# and WPF.},
booktitle = {ACM SIGPLAN Commercial Users of Functional Programming},
articleno = {12},
numpages = {1},
location = {Baltimore, Maryland},
series = {CUFP '10}
}

@inproceedings{10.1145/3511430.3511434,
author = {Singh, Lavneet},
title = {RMVRVM – A Paradigm for Creating Energy Efficient User Applications Connected to Cloud through REST API},
year = {2022},
isbn = {9781450396189},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3511430.3511434},
doi = {10.1145/3511430.3511434},
abstract = {The applications that run on resource-constrained devices, especially for batteries, pose a challenge. The activities such applications do while running on such devices consume energy and drain the device's battery. Many of these applications use REST API to communicate with their backend services running outside of the devices, primarily on the cloud. The paradigms like Model View View-Model (MVVM) used on the application side require data transformations that cause applications to consume more battery. There is a need for an improved approach and a paradigm that can be used to develop green software with reduced battery consumption. This paper proposes a novel Remote-Model View Remote-View-Model (RMVRVM) paradigm. The use of RMVRVM paradigm lowers the battery consumption on devices where the application is running and hence contributes to writing green software. In addition, RMVRVM makes an application more responsive and thus a delight to use. This paradigm has been implemented in industrial case studies, and significant gains in terms of the reduced amount of data transfer, reduced battery consumption, and faster response time were observed. Experiments were also done to further validate the paradigm with encouraging results. The practitioners can apply the RMVRVM to design applications for battery-constrained devices with smaller energy footprints and better response times.},
booktitle = {15th Innovations in Software Engineering Conference},
articleno = {6},
numpages = {11},
keywords = {Battery Saving, Energy Efficient Mobile Applications, Green Software, Model View View-Model (MVVM), Non-functional Requirements, Sustainable Software Engineering},
location = {Gandhinagar, India},
series = {ISEC 2022}
}

@inproceedings{10.1145/3449301.3449322,
author = {Wen, Yana and Wei, Tingyue and Cui, Kewei and Ling, Bai and Zhang, Yahao and Huang, Meng},
title = {Research on Belt and Road Big Data Visualization Based on Text Clustering Algorithm},
year = {2021},
isbn = {9781450388597},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3449301.3449322},
doi = {10.1145/3449301.3449322},
abstract = {In the era of big data, people's visual needs for data expression are increasing. In order to achieve better big data display effects, this article introduced the use of text clustering algorithms to achieve data crawling and Echarts technology to realize big data visualization. This system used mvvm's architecture and vue framework development platform, ThinkPHP was used as the background framework, and ES6 related technologies and specifications were used for application development. This system used Echarts, IView, GIS technology and JavaScript development methods to demonstrate economic big data module functions on the web side; Applied CSS3, HTML5, GIS technology to implement project achievement module and university alliance module; Applied Echarts, HTML5, JS function library technology to achieve national information module. This system used stored procedure, database index optimization technology to achieve rapid screening of massive data, and dynamically update and displayed related data through two-way data binding. This system combined real-time location technology with GIS technology to measure the distance between the user and the destination, and automatically plan the tour route to provide related services. This system can provide feasibility suggestions for strategic researchers or experts in related areas of the “Belt and Road”, and provide theoretical basis and technical support.},
booktitle = {Proceedings of the 6th International Conference on Robotics and Artificial Intelligence},
pages = {121–125},
numpages = {5},
keywords = {Keywords-component, One Belt One Road, Text clustering algorithm, big data visualization},
location = {Singapore, Singapore},
series = {ICRAI '20}
}

@inproceedings{10.5555/3340730.3340763,
author = {Martinez, Matias},
title = {Two datasets of questions and answers for studying the development of cross-platform mobile applications using Xamarin framework},
year = {2019},
publisher = {IEEE Press},
abstract = {A cross-platform mobile application is an application that runs on multiple mobile platforms (Android, iOS). Several frameworks have been proposed to simplify the development of cross-platform mobile applications and, therefore, to reduce development and maintenance costs. Between them, cross-compiler mobile development frameworks, such as Xamarin from Microsoft, transform the application's code written in intermediate (aka non-native) language to native code for each target platform (Android, iOS). However, to our best knowledge, there is not much research about the advantages and disadvantages of the use of those frameworks during the development and maintenance phases of mobile applications.The objective of this paper is to present two datasets of questions and answers (Q &amp; A) related to the development of mobile applications using Xamarin. Our datasets have 85,908 questions mined from the Xamarin Forum and 44,434 from Stack Overflow.To show their usefulness, we present two experiments. First, we replicate a study for discovering the main discussion topics of Xamarin development present in the two datasets using Latent Dirichlet Allocation (LDA), and we compare them with topics previously reported about mobile development. Between the main topics discovered from those questions, we found that some of them are exclusively related to Xamarin and Microsoft technologies such as the design pattern 'MVVM'. Secondly, we aim at improving the official Xamarin documentation, which does not provide a complete description of the error codes that the Xamarin platform throws during development. We use our datasets of Q &amp; A for complementing the error codes with information mined from accepted answers. We could complement the documentation of 23,9% of the error codes.},
booktitle = {Proceedings of the 6th International Conference on Mobile Software Engineering and Systems},
pages = {162–173},
numpages = {12},
location = {Montreal, Quebec, Canada},
series = {MOBILESoft '19}
}

@inproceedings{10.1145/3512353.3512384,
author = {Li, Hang and Li, Sufang and Yu, Jiguo and Han, Yubing and Dong, Anming},
title = {AIoT Platform Design Based on Front and Rear End Separation Architecture for Smart Agricultural},
year = {2022},
isbn = {9781450395571},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3512353.3512384},
doi = {10.1145/3512353.3512384},
abstract = {With the development of informatization, intelligence and precision of modern agriculture, i.e. there is a need for the integration of artificial intelligence (AI) with Internet of Things (IoT) systems, which is called AIoT (AI + IoT) systems. In this paper, we design an AIoT system for the smart agriculture based on the concept of front-rear end separation and the framework of MVVM (Model-View-View Model), through which it is possible to handle complex business logic and makes the integrating the AI algorithms much easier. Specifically, the system consists of a remote data service platform, the data collection terminals build on Raspberry Pi and the wireless data transmission using narrow-band Internet of Things (NB-IoT) modules. The data service platform is designed with the separated front-end and rear-end. The front-end is a web page constructed by the Vue.js and Element, while the rear-end business logic processing is constructed using the Python Django framework. The data interaction between the front and rear ends is realized through Axios. In such a way, the data in the front-end and the rear-end are decoupled, which makes it possible to improve the capability in dealing with complex data and makes it easy to carry out add-on development and extend new functions. Based on the data service platform, a series of basic application functions are integrated, including real-time data monitoring, historical data query, data visualization and abnormal data alerting, etc. Moreover, we integrate a deep-learning-based plant disease and pest detection algorithm in the propose system to show its scalability. In addition, the system also combines edge computing technology to improve the overall response efficiency of the system. The system has a convenient expansion interface and can be used as a basic development platform for various agricultural IoT applications, such as the soil environmental monitoring system and the intelligent disease and pest monitoring system, etc.},
booktitle = {Proceedings of the 2022 4th Asia Pacific Information Technology Conference},
pages = {208–214},
numpages = {7},
keywords = {Artificial Intelligent Internet of Things (AIoT), Deep Learning, Edge Computing, Front-end and Rear-end Separation, Smart Agriculture},
location = {Virtual Event, Thailand},
series = {APIT '22}
}

